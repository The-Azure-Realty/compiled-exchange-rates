name: Compile Exchange Rates and Cache Locally

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  workflow_dispatch:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - .github/workflows/cache-exchange-rates.yml

  schedule:
    # At minute 0 past every 4th hour.
    # https://crontab.guru/#0_*/4_*_*_*
    - cron: "0 */4 * * *"

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write      # to deploy to Pages
  id-token: write   # to verify the deployment originates from an appropriate source

jobs:
  CompileExchangeRates:
    
    runs-on: ubuntu-latest
    
    steps:
      
      - name: Checkout
        uses: actions/checkout@v3

      - env:
          APIURL: ${{secrets.APIURL}}
          APIKEY: ${{secrets.APIKEY}}
          BASESYMBOL: ${{vars.BASESYMBOL}}
        run: |-
          sh ./fetch-exchange-rates.bash \
            ${{env.APIURL}} \
            ${{env.BASESYMBOL}} \
            ${{env.APIKEY}}

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          path: ./


  PublishToGithubPages:
    
    runs-on: ubuntu-latest
    
    needs: 
      - CompileExchangeRates

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Setup Pages
        uses: actions/configure-pages@v3
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1

  CreateHistoricalRelease:
    
    runs-on: ubuntu-latest
    
    needs: 
      - CompileExchangeRates

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: github-pages

      - name: Display structure of downloaded files
        run: ls -R
      
      - name: Create timestamp
        shell: bash
        id: generate-timestamp
        run: echo "timestamp=$(date "+%F-%H-%M-%S")" >> $GITHUB_OUTPUT

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ steps.generate-timestamp.outputs.timetamp }}
          tag_name: ${{ steps.generate-timestamp.outputs.timetamp }}